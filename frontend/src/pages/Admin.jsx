import { useEffect, useState } from "react";
import { me, createAnnouncement, listAnnouncements, updateAnnouncement, deleteAnnouncement } from "../api";
import { useNavigate, useParams } from "react-router-dom";

export default function Admin() {
  const navigate = useNavigate();
  const { slug } = useParams();        // /h/:slug/admin

  const [info, setInfo] = useState(null);
  const [items, setItems] = useState([]);
  const [form, setForm] = useState({ id: null, title: "", content: "", pinned: false });
  const [error, setError] = useState("");

  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const u = await me();
        // –µ—Å–ª–∏ –≤–æ—à–ª–∏ –Ω–µ –Ω–∞ —Å–≤–æ—ë–º slug ‚Äî –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if (u.house_slug !== slug) {
          navigate(`/h/${u.house_slug}/admin`, { replace: true });
          return;
        }
        if (cancelled) return;
        setInfo(u);
        const anns = await listAnnouncements(slug);
        if (cancelled) return;
        setItems(anns);
      } catch {
        setError("–ù—É–∂–Ω–æ –≤–æ–π—Ç–∏");
        navigate(`/login?house=${slug}`, { replace: true });
      }
    })();
    return () => { cancelled = true; };
  }, [navigate, slug]);

  async function onSubmit(e) {
    e.preventDefault();
    if (!info) return;
    setError("");
    try {
      if (form.id) {
        await updateAnnouncement(form.id, { title: form.title, content: form.content, pinned: form.pinned });
      } else {
        await createAnnouncement(slug, { title: form.title, content: form.content, pinned: form.pinned });
      }
      setForm({ id: null, title: "", content: "", pinned: false });
      const anns = await listAnnouncements(slug);
      setItems(anns);
    } catch {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å");
    }
  }

  if (!info) {
    return (
      <div>
        <h2>–ê–¥–º–∏–Ω–∫–∞</h2>
        <p>{error || "–ó–∞–≥—Ä—É–∑–∫–∞..."}</p>
      </div>
    );
  }

  return (
    <div>
      <h2>–ê–¥–º–∏–Ω–∫–∞ ‚Äî –¥–æ–º {slug}</h2>

      <form onSubmit={onSubmit} style={{display:"grid", gap:12, maxWidth:560, marginBottom:16}}>
        <input
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={form.title}
          onChange={e=>setForm({...form, title: e.target.value})}
          required
        />
        <textarea
          placeholder="–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
          rows={6}
          value={form.content}
          onChange={e=>setForm({...form, content: e.target.value})}
          required
        />
        {/* –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –æ–¥–Ω—É –ª–∏–Ω–∏—é */}
        <label className="row">
          <input
            type="checkbox"
            checked={form.pinned}
            onChange={e=>setForm({...form, pinned: e.target.checked})}
          />
          –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö
        </label>

        <div className="row">
          <button type="submit" className="btn">
            {form.id ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"}
          </button>
          {form.id && (
            <button
              type="button"
              className="btn-ghost"
              onClick={() => setForm({ id: null, title: "", content: "", pinned: false })}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          )}
        </div>
      </form>

      <h3>–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</h3>
      <ul style={{display:"grid", gap:12, listStyle:"none", padding:0}}>
        {items.map(a => (
          <li key={a.id} className="card">
            {a.pinned && <span className="badge">üìå –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ</span>}
            <div style={{display:"flex", justifyContent:"space-between", alignItems:"center", gap:8}}>
              <h4 style={{margin:"6px 0"}}>{a.title}</h4>
              <div style={{display:"flex", gap:8}}>
                <button
                  className="btn-ghost"
                  onClick={() => setForm({ id: a.id, title: a.title, content: a.content, pinned: a.pinned })}
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                >
                  ‚úèÔ∏è
                </button>
                <button
                  className="btn-ghost"
                  onClick={async () => {
                    if (confirm("–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?")) {
                      try {
                        await deleteAnnouncement(a.id);
                        const anns = await listAnnouncements(slug);
                        setItems(anns);
                      } catch {
                        setError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å");
                      }
                    }
                  }}
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  üóëÔ∏è
                </button>
              </div>
            </div>
            <div style={{whiteSpace:"pre-wrap"}}>{a.content}</div>
            <div className="meta" style={{marginTop:8}}>
              {new Date(a.created_at).toLocaleString()}
            </div>
          </li>
        ))}
      </ul>

      {error && <p style={{color:"red"}}>{error}</p>}
    </div>
  );
}
